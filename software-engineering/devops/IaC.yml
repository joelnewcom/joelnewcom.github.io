# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main

variables:
  #Library
  - group: tfstate
  - group: openhack
  # Pipelines
  - name: isPullRequest
    value: $[eq(variables['Build.Reason'], 'PullRequest')]
  - name: isMain
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  - name: isRelease
    value: $[startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')]

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Terraform_Stage
    dependsOn: []
    condition: or(eq(variables.isMain, true), eq(variables.isPullRequest, true))
    displayName: "Teraform Stage"
    jobs:
      - job: Stage
        displayName: "Teraform Stage"
        steps:
          - task: CmdLine@2
            inputs:
              script: 'tree'
            displayName: 'Run tree command'

          - task: TerraformCLI@0
            inputs:
              command: 'fmt'
              workingDirectory: 'iac/terraform'
              allowTelemetryCollection: true
            displayName: 'Check Syntax'

          - task: TerraformCLI@0
            inputs:
              command: 'init'
              workingDirectory: 'iac/terraform'
              backendType: 'azurerm'
              backendServiceArm: 'Azure subscription 1(70dd8db4-d1df-4f61-8338-1da44360da4f)'
              backendAzureRmSubscriptionId: '$(SUBSCRIPTION_ID)'
              backendAzureRmResourceGroupName: '$(TFSTATE_RESOURCES_GROUP_NAME)'
              backendAzureRmStorageAccountName: '$(TFSTATE_STORAGE_ACCOUNT_NAME)'
              backendAzureRmContainerName: '$(TFSTATE_STORAGE_CONTAINER_NAME)'
              backendAzureRmKey: '$(TFSTATE_KEY)'
              allowTelemetryCollection: true
            displayName: 'Terraform Init'

          - task: TerraformCLI@0
            inputs:
              command: 'validate'
              workingDirectory: 'iac/terraform'
              allowTelemetryCollection: true
            displayName: 'Terraform Validate'

  - stage: Terraform_Deploy
    dependsOn: Terraform_Stage
    condition: and(succeeded(), eq(variables.isMain, true))
    displayName: "Teraform Stage"
    jobs:
      - deployment: "Deploy"
        displayName: "Terraform Deploy"
        environment: "PROD"
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: TerraformCLI@0
                  inputs:
                    command: 'init'
                    workingDirectory: 'iac/terraform'
                    backendType: 'azurerm'
                    backendServiceArm: 'Azure subscription 1(70dd8db4-d1df-4f61-8338-1da44360da4f)'
                    backendAzureRmSubscriptionId: '$(SUBSCRIPTION_ID)'
                    backendAzureRmResourceGroupName: '$(TFSTATE_RESOURCES_GROUP_NAME)'
                    backendAzureRmStorageAccountName: '$(TFSTATE_STORAGE_ACCOUNT_NAME)'
                    backendAzureRmContainerName: '$(TFSTATE_STORAGE_CONTAINER_NAME)'
                    backendAzureRmKey: '$(TFSTATE_KEY)'
                    allowTelemetryCollection: true
                  displayName: 'Terraform Init'

                - task: TerraformCLI@0
                  inputs:
                    command: 'plan'
                    workingDirectory: 'iac/terraform'
                    environmentServiceName: 'AzureServiceConnection'
                    runAzLogin: true
                    providerAzureRmSubscriptionId: '$(SUBSCRIPTION_ID)'
                    commandOptions: '-var "location=$(LOCATION)" -var "resources_prefix=$(RESOURCES_PREFIX)"'
                    allowTelemetryCollection: true
                  displayName: 'Terraform Plan'

                - task: TerraformCLI@0
                  inputs:
                    command: 'apply'
                    workingDirectory: 'iac/terraform'
                    environmentServiceName: 'AzureServiceConnection'
                    runAzLogin: true
                    providerAzureRmSubscriptionId: '$(SUBSCRIPTION_ID)'
                    commandOptions: '-var="location=$(LOCATION)" -var="resources_prefix=$(RESOURCES_PREFIX)"'
                    allowTelemetryCollection: true
                  displayName: 'Terraform Apply'

    #azure_login
    #lint_terraform
    #init_terrafrom
    # init_terrafrom_local
    #validate_terraform
    #preview_terraform
    #deploy_terraform $?
    # destroy_terraform
    # deployment_output=$(terraform output -json)
    # hostnames=$(echo "${deployment_output}" | jq -r -c 'map(.value) | join(",")')
    # test_deploy "${hostnames}"
